// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: user.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UserProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateKitchen(ctx context.Context, in *CreateKitchenRequest, opts ...grpc.CallOption) (*CreateKitchenResponse, error)
	UpdateKitchen(ctx context.Context, in *UpdateKitchenRequest, opts ...grpc.CallOption) (*UpdateKitchenResponse, error)
	GetByIdKitchen(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*KitchenResponse, error)
	GetAll(ctx context.Context, in *LimitOffset, opts ...grpc.CallOption) (*KitchensResponse, error)
	SearchKitchen(ctx context.Context, in *SearchKitchenRequest, opts ...grpc.CallOption) (*KitchensResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UpdatePassword(ctx context.Context, in *UpdateKitchenRequest, opts ...grpc.CallOption) (*Void, error)
	UpdateWorkingHours(ctx context.Context, in *UpdateWorkingHoursRequest, opts ...grpc.CallOption) (*UpdateWorkingHoursResponse, error)
	ActivityUser(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*GetUserActivityResponse, error)
	KitchenStatistic(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*KitchenStatisticsResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/UserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateKitchen(ctx context.Context, in *CreateKitchenRequest, opts ...grpc.CallOption) (*CreateKitchenResponse, error) {
	out := new(CreateKitchenResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/CreateKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateKitchen(ctx context.Context, in *UpdateKitchenRequest, opts ...grpc.CallOption) (*UpdateKitchenResponse, error) {
	out := new(UpdateKitchenResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/UpdateKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByIdKitchen(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*KitchenResponse, error) {
	out := new(KitchenResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/GetByIdKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAll(ctx context.Context, in *LimitOffset, opts ...grpc.CallOption) (*KitchensResponse, error) {
	out := new(KitchensResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchKitchen(ctx context.Context, in *SearchKitchenRequest, opts ...grpc.CallOption) (*KitchensResponse, error) {
	out := new(KitchensResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/SearchKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassword(ctx context.Context, in *UpdateKitchenRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.UserService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateWorkingHours(ctx context.Context, in *UpdateWorkingHoursRequest, opts ...grpc.CallOption) (*UpdateWorkingHoursResponse, error) {
	out := new(UpdateWorkingHoursResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/UpdateWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ActivityUser(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*GetUserActivityResponse, error) {
	out := new(GetUserActivityResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/ActivityUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) KitchenStatistic(ctx context.Context, in *GetUserActivityRequest, opts ...grpc.CallOption) (*KitchenStatisticsResponse, error) {
	out := new(KitchenStatisticsResponse)
	err := c.cc.Invoke(ctx, "/protos.UserService/KitchenStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	UserProfile(context.Context, *IdRequest) (*UserResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UserResponse, error)
	CreateKitchen(context.Context, *CreateKitchenRequest) (*CreateKitchenResponse, error)
	UpdateKitchen(context.Context, *UpdateKitchenRequest) (*UpdateKitchenResponse, error)
	GetByIdKitchen(context.Context, *IdRequest) (*KitchenResponse, error)
	GetAll(context.Context, *LimitOffset) (*KitchensResponse, error)
	SearchKitchen(context.Context, *SearchKitchenRequest) (*KitchensResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*LoginResponse, error)
	UpdatePassword(context.Context, *UpdateKitchenRequest) (*Void, error)
	UpdateWorkingHours(context.Context, *UpdateWorkingHoursRequest) (*UpdateWorkingHoursResponse, error)
	ActivityUser(context.Context, *GetUserActivityRequest) (*GetUserActivityResponse, error)
	KitchenStatistic(context.Context, *GetUserActivityRequest) (*KitchenStatisticsResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) UserProfile(context.Context, *IdRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) CreateKitchen(context.Context, *CreateKitchenRequest) (*CreateKitchenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKitchen not implemented")
}
func (UnimplementedUserServiceServer) UpdateKitchen(context.Context, *UpdateKitchenRequest) (*UpdateKitchenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKitchen not implemented")
}
func (UnimplementedUserServiceServer) GetByIdKitchen(context.Context, *IdRequest) (*KitchenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdKitchen not implemented")
}
func (UnimplementedUserServiceServer) GetAll(context.Context, *LimitOffset) (*KitchensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserServiceServer) SearchKitchen(context.Context, *SearchKitchenRequest) (*KitchensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchKitchen not implemented")
}
func (UnimplementedUserServiceServer) UpdateToken(context.Context, *UpdateTokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedUserServiceServer) UpdatePassword(context.Context, *UpdateKitchenRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserServiceServer) UpdateWorkingHours(context.Context, *UpdateWorkingHoursRequest) (*UpdateWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkingHours not implemented")
}
func (UnimplementedUserServiceServer) ActivityUser(context.Context, *GetUserActivityRequest) (*GetUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityUser not implemented")
}
func (UnimplementedUserServiceServer) KitchenStatistic(context.Context, *GetUserActivityRequest) (*KitchenStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KitchenStatistic not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/UserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserProfile(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKitchenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/CreateKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateKitchen(ctx, req.(*CreateKitchenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKitchenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/UpdateKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateKitchen(ctx, req.(*UpdateKitchenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByIdKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByIdKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/GetByIdKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByIdKitchen(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAll(ctx, req.(*LimitOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKitchenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/SearchKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchKitchen(ctx, req.(*SearchKitchenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKitchenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePassword(ctx, req.(*UpdateKitchenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/UpdateWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateWorkingHours(ctx, req.(*UpdateWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ActivityUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ActivityUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/ActivityUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ActivityUser(ctx, req.(*GetUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_KitchenStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).KitchenStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserService/KitchenStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).KitchenStatistic(ctx, req.(*GetUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _UserService_UserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "CreateKitchen",
			Handler:    _UserService_CreateKitchen_Handler,
		},
		{
			MethodName: "UpdateKitchen",
			Handler:    _UserService_UpdateKitchen_Handler,
		},
		{
			MethodName: "GetByIdKitchen",
			Handler:    _UserService_GetByIdKitchen_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserService_GetAll_Handler,
		},
		{
			MethodName: "SearchKitchen",
			Handler:    _UserService_SearchKitchen_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _UserService_UpdateToken_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateWorkingHours",
			Handler:    _UserService_UpdateWorkingHours_Handler,
		},
		{
			MethodName: "ActivityUser",
			Handler:    _UserService_ActivityUser_Handler,
		},
		{
			MethodName: "KitchenStatistic",
			Handler:    _UserService_KitchenStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
